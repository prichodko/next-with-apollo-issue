{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/pavel/Developer/playground/with-apollo-app/lib/with-apollo-client.js\";\nimport React from 'react';\nimport initApollo from './init-apollo';\nimport Head from 'next/head';\nimport { getDataFromTree } from 'react-apollo';\nexport default (function (App) {\n  var _class, _temp;\n\n  return _temp = _class =\n  /*#__PURE__*/\n  function (_React$Component) {\n    _inherits(Apollo, _React$Component);\n\n    _createClass(Apollo, null, [{\n      key: \"getInitialProps\",\n      value: function () {\n        var _getInitialProps = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee(ctx) {\n          var AppTree, appProps, apollo, apolloState;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  AppTree = ctx.AppTree;\n                  appProps = {};\n\n                  if (!App.getInitialProps) {\n                    _context.next = 6;\n                    break;\n                  }\n\n                  _context.next = 5;\n                  return App.getInitialProps(ctx);\n\n                case 5:\n                  appProps = _context.sent;\n\n                case 6:\n                  // Run all GraphQL queries in the component tree\n                  // and extract the resulting data\n                  apollo = initApollo(); // if (typeof window === 'undefined') {\n\n                  _context.prev = 7;\n                  _context.next = 10;\n                  return getDataFromTree(React.createElement(App, _extends({}, appProps, {\n                    apolloClient: apollo,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 23\n                    },\n                    __self: this\n                  })));\n\n                case 10:\n                  _context.next = 15;\n                  break;\n\n                case 12:\n                  _context.prev = 12;\n                  _context.t0 = _context[\"catch\"](7);\n                  // Prevent Apollo Client GraphQL errors from crashing SSR.\n                  // Handle them in components via the data.error prop:\n                  // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n                  console.error('Error while running `getDataFromTree`', _context.t0);\n\n                case 15:\n                  // getDataFromTree does not call componentWillUnmount\n                  // head side effect therefore need to be cleared manually\n                  if (typeof window === 'undefined') {\n                    Head.rewind();\n                  } // Extract query data from the Apollo store\n\n\n                  apolloState = apollo.cache.extract();\n                  return _context.abrupt(\"return\", _objectSpread({}, appProps, {\n                    apolloState: apolloState\n                  }));\n\n                case 18:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, this, [[7, 12]]);\n        }));\n\n        function getInitialProps(_x) {\n          return _getInitialProps.apply(this, arguments);\n        }\n\n        return getInitialProps;\n      }()\n    }]);\n\n    function Apollo(props) {\n      var _this;\n\n      _classCallCheck(this, Apollo);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(Apollo).call(this, props));\n      _this.apolloClient = initApollo(props.apolloState);\n      return _this;\n    }\n\n    _createClass(Apollo, [{\n      key: \"render\",\n      value: function render() {\n        return React.createElement(App, _extends({\n          apolloClient: this.apolloClient\n        }, this.props, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 52\n          },\n          __self: this\n        }));\n      }\n    }]);\n\n    return Apollo;\n  }(React.Component), _defineProperty(_class, \"displayName\", 'withApollo(App)'), _temp;\n});","map":{"version":3,"sources":["/Users/pavel/Developer/playground/with-apollo-app/lib/with-apollo-client.js"],"names":["React","initApollo","Head","getDataFromTree","App","ctx","AppTree","appProps","getInitialProps","apollo","console","error","window","rewind","apolloState","cache","extract","props","apolloClient","Component"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,eAAvB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,eAAT,QAAgC,cAAhC;AAEA,gBAAe,UAAAC,GAAG,EAAI;AAAA;;AACpB;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kDAE+BC,GAF/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAGYC,kBAAAA,OAHZ,GAGwBD,GAHxB,CAGYC,OAHZ;AAKQC,kBAAAA,QALR,GAKmB,EALnB;;AAAA,uBAMQH,GAAG,CAACI,eANZ;AAAA;AAAA;AAAA;;AAAA;AAAA,yBAOuBJ,GAAG,CAACI,eAAJ,CAAoBH,GAApB,CAPvB;;AAAA;AAOME,kBAAAA,QAPN;;AAAA;AAUI;AACA;AACME,kBAAAA,MAZV,GAYmBR,UAAU,EAZ7B,EAaI;;AAbJ;AAAA;AAAA,yBAgBYE,eAAe,CAAC,oBAAC,GAAD,eAASI,QAAT;AAAmB,oBAAA,YAAY,EAAEE,MAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAD,CAhB3B;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAkBM;AACA;AACA;AACAC,kBAAAA,OAAO,CAACC,KAAR,CAAc,uCAAd;;AArBN;AAwBI;AACA;AACA,sBAAI,OAAOC,MAAP,KAAkB,WAAtB,EAAmC;AACjCV,oBAAAA,IAAI,CAACW,MAAL;AACD,mBA5BL,CA8BI;;;AACMC,kBAAAA,WA/BV,GA+BwBL,MAAM,CAACM,KAAP,CAAaC,OAAb,EA/BxB;AAAA,qEAkCST,QAlCT;AAmCMO,oBAAAA,WAAW,EAAXA;AAnCN;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAuCE,oBAAYG,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,kFAAMA,KAAN;AACA,YAAKC,YAAL,GAAoBjB,UAAU,CAACgB,KAAK,CAACH,WAAP,CAA9B;AAFiB;AAGlB;;AA1CH;AAAA;AAAA,+BA4CW;AACP,eAAO,oBAAC,GAAD;AAAK,UAAA,YAAY,EAAE,KAAKI;AAAxB,WAA0C,KAAKD,KAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAP;AACD;AA9CH;;AAAA;AAAA,IAA4BjB,KAAK,CAACmB,SAAlC,0CACuB,iBADvB;AAgDD,CAjDD","sourcesContent":["import React from 'react'\nimport initApollo from './init-apollo'\nimport Head from 'next/head'\nimport { getDataFromTree } from 'react-apollo'\n\nexport default App => {\n  return class Apollo extends React.Component {\n    static displayName = 'withApollo(App)'\n    static async getInitialProps(ctx) {\n      const { AppTree } = ctx\n\n      let appProps = {}\n      if (App.getInitialProps) {\n        appProps = await App.getInitialProps(ctx)\n      }\n\n      // Run all GraphQL queries in the component tree\n      // and extract the resulting data\n      const apollo = initApollo()\n      // if (typeof window === 'undefined') {\n      try {\n        // Run all GraphQL queries\n        await getDataFromTree(<App {...appProps} apolloClient={apollo} />)\n      } catch (error) {\n        // Prevent Apollo Client GraphQL errors from crashing SSR.\n        // Handle them in components via the data.error prop:\n        // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n        console.error('Error while running `getDataFromTree`', error)\n      }\n\n      // getDataFromTree does not call componentWillUnmount\n      // head side effect therefore need to be cleared manually\n      if (typeof window === 'undefined') {\n        Head.rewind()\n      }\n\n      // Extract query data from the Apollo store\n      const apolloState = apollo.cache.extract()\n\n      return {\n        ...appProps,\n        apolloState,\n      }\n    }\n\n    constructor(props) {\n      super(props)\n      this.apolloClient = initApollo(props.apolloState)\n    }\n\n    render() {\n      return <App apolloClient={this.apolloClient} {...this.props} />\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}