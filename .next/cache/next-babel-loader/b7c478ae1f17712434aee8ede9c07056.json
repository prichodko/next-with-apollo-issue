{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/pavel/Developer/playground/with-apollo-app/lib/with-apollo-client.js\";\nimport React from 'react';\nimport initApollo from './init-apollo';\nimport Head from 'next/head';\nimport { getDataFromTree } from 'react-apollo';\nexport default (App => {\n  var _class, _temp;\n\n  return _temp = _class = class Apollo extends React.Component {\n    static async getInitialProps(ctx) {\n      const {\n        AppTree\n      } = ctx;\n      let appProps = {};\n\n      if (App.getInitialProps) {\n        appProps = await App.getInitialProps(ctx);\n      } // Run all GraphQL queries in the component tree\n      // and extract the resulting data\n\n\n      const apollo = initApollo(); // if (typeof window === 'undefined') {\n\n      try {\n        // Run all GraphQL queries\n        await getDataFromTree(React.createElement(AppTree, _extends({}, appProps, {\n          apolloClient: apollo,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 23\n          },\n          __self: this\n        })));\n      } catch (error) {\n        // Prevent Apollo Client GraphQL errors from crashing SSR.\n        // Handle them in components via the data.error prop:\n        // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n        console.error('Error while running `getDataFromTree`', error);\n      } // getDataFromTree does not call componentWillUnmount\n      // head side effect therefore need to be cleared manually\n\n\n      if (typeof window === 'undefined') {\n        Head.rewind();\n      } // Extract query data from the Apollo store\n\n\n      const apolloState = apollo.cache.extract();\n      return _objectSpread({}, appProps, {\n        apolloState\n      });\n    }\n\n    constructor(props) {\n      super(props);\n      this.apolloClient = initApollo(props.apolloState);\n    }\n\n    render() {\n      return React.createElement(App, _extends({\n        apolloClient: this.apolloClient\n      }, this.props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }));\n    }\n\n  }, _defineProperty(_class, \"displayName\", 'withApollo(App)'), _temp;\n});","map":{"version":3,"sources":["/Users/pavel/Developer/playground/with-apollo-app/lib/with-apollo-client.js"],"names":["React","initApollo","Head","getDataFromTree","App","Apollo","Component","getInitialProps","ctx","AppTree","appProps","apollo","error","console","window","rewind","apolloState","cache","extract","constructor","props","apolloClient","render"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,eAAvB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,eAAT,QAAgC,cAAhC;AAEA,gBAAeC,GAAG,IAAI;AAAA;;AACpB,0BAAO,MAAMC,MAAN,SAAqBL,KAAK,CAACM,SAA3B,CAAqC;AAE1C,iBAAaC,eAAb,CAA6BC,GAA7B,EAAkC;AAChC,YAAM;AAAEC,QAAAA;AAAF,UAAcD,GAApB;AAEA,UAAIE,QAAQ,GAAG,EAAf;;AACA,UAAIN,GAAG,CAACG,eAAR,EAAyB;AACvBG,QAAAA,QAAQ,GAAG,MAAMN,GAAG,CAACG,eAAJ,CAAoBC,GAApB,CAAjB;AACD,OAN+B,CAQhC;AACA;;;AACA,YAAMG,MAAM,GAAGV,UAAU,EAAzB,CAVgC,CAWhC;;AACA,UAAI;AACF;AACA,cAAME,eAAe,CAAC,oBAAC,OAAD,eAAaO,QAAb;AAAuB,UAAA,YAAY,EAAEC,MAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAD,CAArB;AACD,OAHD,CAGE,OAAOC,KAAP,EAAc;AACd;AACA;AACA;AACAC,QAAAA,OAAO,CAACD,KAAR,CAAc,uCAAd,EAAuDA,KAAvD;AACD,OApB+B,CAsBhC;AACA;;;AACA,UAAI,OAAOE,MAAP,KAAkB,WAAtB,EAAmC;AACjCZ,QAAAA,IAAI,CAACa,MAAL;AACD,OA1B+B,CA4BhC;;;AACA,YAAMC,WAAW,GAAGL,MAAM,CAACM,KAAP,CAAaC,OAAb,EAApB;AAEA,+BACKR,QADL;AAEEM,QAAAA;AAFF;AAID;;AAEDG,IAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,YAAMA,KAAN;AACA,WAAKC,YAAL,GAAoBpB,UAAU,CAACmB,KAAK,CAACJ,WAAP,CAA9B;AACD;;AAEDM,IAAAA,MAAM,GAAG;AACP,aAAO,oBAAC,GAAD;AAAK,QAAA,YAAY,EAAE,KAAKD;AAAxB,SAA0C,KAAKD,KAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AACD;;AA9CyC,GAA5C,yCACuB,iBADvB;AAgDD,CAjDD","sourcesContent":["import React from 'react'\nimport initApollo from './init-apollo'\nimport Head from 'next/head'\nimport { getDataFromTree } from 'react-apollo'\n\nexport default App => {\n  return class Apollo extends React.Component {\n    static displayName = 'withApollo(App)'\n    static async getInitialProps(ctx) {\n      const { AppTree } = ctx\n\n      let appProps = {}\n      if (App.getInitialProps) {\n        appProps = await App.getInitialProps(ctx)\n      }\n\n      // Run all GraphQL queries in the component tree\n      // and extract the resulting data\n      const apollo = initApollo()\n      // if (typeof window === 'undefined') {\n      try {\n        // Run all GraphQL queries\n        await getDataFromTree(<AppTree {...appProps} apolloClient={apollo} />)\n      } catch (error) {\n        // Prevent Apollo Client GraphQL errors from crashing SSR.\n        // Handle them in components via the data.error prop:\n        // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n        console.error('Error while running `getDataFromTree`', error)\n      }\n\n      // getDataFromTree does not call componentWillUnmount\n      // head side effect therefore need to be cleared manually\n      if (typeof window === 'undefined') {\n        Head.rewind()\n      }\n\n      // Extract query data from the Apollo store\n      const apolloState = apollo.cache.extract()\n\n      return {\n        ...appProps,\n        apolloState,\n      }\n    }\n\n    constructor(props) {\n      super(props)\n      this.apolloClient = initApollo(props.apolloState)\n    }\n\n    render() {\n      return <App apolloClient={this.apolloClient} {...this.props} />\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}