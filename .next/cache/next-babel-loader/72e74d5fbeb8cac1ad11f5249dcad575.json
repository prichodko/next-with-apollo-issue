{"ast":null,"code":"import { ApolloClient, InMemoryCache, HttpLink } from 'apollo-boost';\nimport fetch from 'isomorphic-unfetch';\nvar apolloClient = null;\n\nfunction create(initialState) {\n  // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n  var isBrowser = typeof window !== 'undefined';\n  return new ApolloClient({\n    connectToDevTools: isBrowser,\n    ssrMode: !isBrowser,\n    // Disables forceFetch on the server (so queries are only run once)\n    link: new HttpLink({\n      uri: 'https://api.graph.cool/simple/v1/cixmkt2ul01q00122mksg82pn',\n      // Server URL (must be absolute)\n      credentials: 'same-origin',\n      // Additional fetch() options like `credentials` or `headers`\n      // Use fetch() polyfill on the server\n      fetch: !isBrowser && fetch\n    }),\n    cache: new InMemoryCache().restore(initialState || {})\n  });\n}\n\nexport default function initApollo(initialState) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (typeof window === 'undefined') {\n    return create(initialState);\n  } // Reuse client on the client-side\n\n\n  if (!apolloClient) {\n    apolloClient = create(initialState);\n  }\n\n  return apolloClient;\n}","map":{"version":3,"sources":["/Users/pavel/Developer/playground/with-apollo-app/lib/init-apollo.js"],"names":["ApolloClient","InMemoryCache","HttpLink","fetch","apolloClient","create","initialState","isBrowser","window","connectToDevTools","ssrMode","link","uri","credentials","cache","restore","initApollo"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,aAAvB,EAAsCC,QAAtC,QAAsD,cAAtD;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AAEA,IAAIC,YAAY,GAAG,IAAnB;;AAEA,SAASC,MAAT,CAAiBC,YAAjB,EAA+B;AAC7B;AACA,MAAMC,SAAS,GAAG,OAAOC,MAAP,KAAkB,WAApC;AACA,SAAO,IAAIR,YAAJ,CAAiB;AACtBS,IAAAA,iBAAiB,EAAEF,SADG;AAEtBG,IAAAA,OAAO,EAAE,CAACH,SAFY;AAED;AACrBI,IAAAA,IAAI,EAAE,IAAIT,QAAJ,CAAa;AACjBU,MAAAA,GAAG,EAAE,4DADY;AACkD;AACnEC,MAAAA,WAAW,EAAE,aAFI;AAEW;AAC5B;AACAV,MAAAA,KAAK,EAAE,CAACI,SAAD,IAAcJ;AAJJ,KAAb,CAHgB;AAStBW,IAAAA,KAAK,EAAE,IAAIb,aAAJ,GAAoBc,OAApB,CAA4BT,YAAY,IAAI,EAA5C;AATe,GAAjB,CAAP;AAWD;;AAED,eAAe,SAASU,UAAT,CAAqBV,YAArB,EAAmC;AAChD;AACA;AACA,MAAI,OAAOE,MAAP,KAAkB,WAAtB,EAAmC;AACjC,WAAOH,MAAM,CAACC,YAAD,CAAb;AACD,GAL+C,CAOhD;;;AACA,MAAI,CAACF,YAAL,EAAmB;AACjBA,IAAAA,YAAY,GAAGC,MAAM,CAACC,YAAD,CAArB;AACD;;AAED,SAAOF,YAAP;AACD","sourcesContent":["import { ApolloClient, InMemoryCache, HttpLink } from 'apollo-boost'\nimport fetch from 'isomorphic-unfetch'\n\nlet apolloClient = null\n\nfunction create (initialState) {\n  // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n  const isBrowser = typeof window !== 'undefined'\n  return new ApolloClient({\n    connectToDevTools: isBrowser,\n    ssrMode: !isBrowser, // Disables forceFetch on the server (so queries are only run once)\n    link: new HttpLink({\n      uri: 'https://api.graph.cool/simple/v1/cixmkt2ul01q00122mksg82pn', // Server URL (must be absolute)\n      credentials: 'same-origin', // Additional fetch() options like `credentials` or `headers`\n      // Use fetch() polyfill on the server\n      fetch: !isBrowser && fetch\n    }),\n    cache: new InMemoryCache().restore(initialState || {})\n  })\n}\n\nexport default function initApollo (initialState) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (typeof window === 'undefined') {\n    return create(initialState)\n  }\n\n  // Reuse client on the client-side\n  if (!apolloClient) {\n    apolloClient = create(initialState)\n  }\n\n  return apolloClient\n}\n"]},"metadata":{},"sourceType":"module"}